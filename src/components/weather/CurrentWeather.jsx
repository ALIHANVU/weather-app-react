// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π CurrentWeather.jsx
import { memo } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import useWeather from '../../hooks/useWeather'
import { isExtremeTemperatureForPlants } from '../../utils/weatherUtils'
import WeatherIcon from '../shared/WeatherIcon'

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã —Å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∞–Ω–∏–º–∞—Ü–∏—è–º–∏
 * –ò—Å–ø–æ–ª—å–∑—É–µ–º memo –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –Ω–µ–Ω—É–∂–Ω—ã—Ö –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–æ–∫
 */
const CurrentWeather = memo(() => {
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  const { weatherData, currentCity, isAnimating } = useWeather()
  
  // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –Ω–µ —Ä–µ–Ω–¥–µ—Ä–∏–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
  if (!weatherData || !weatherData.weather) return null
  
  const { main, weather, name } = weatherData.weather
  const isExtremeTemp = isExtremeTemperatureForPlants(main.temp)
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç —Ñ–æ–Ω–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–≥–æ–¥—ã
  let bgGradient = 'bg-gradient-to-b from-sky-400 to-sky-600'
  
  if (weather && weather[0]) {
    const weatherId = weather[0].id
    const isDaytime = weather[0].icon.includes('d')
    
    if (weatherId >= 200 && weatherId < 300) { // –ì—Ä–æ–∑–∞
      bgGradient = 'bg-gradient-to-b from-gray-600 to-gray-800'
    } else if (weatherId >= 300 && weatherId < 400) { // –ú–æ—Ä–æ—Å—å
      bgGradient = 'bg-gradient-to-b from-sky-300 to-sky-500'
    } else if (weatherId >= 500 && weatherId < 600) { // –î–æ–∂–¥—å
      bgGradient = 'bg-gradient-to-b from-blue-400 to-blue-600'
    } else if (weatherId >= 600 && weatherId < 700) { // –°–Ω–µ–≥
      bgGradient = 'bg-gradient-to-b from-blue-100 to-blue-300'
    } else if (weatherId >= 700 && weatherId < 800) { // –ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è
      bgGradient = 'bg-gradient-to-b from-gray-300 to-gray-500'
    } else if (weatherId === 800) { // –Ø—Å–Ω–æ
      bgGradient = isDaytime 
        ? 'bg-gradient-to-b from-sky-400 to-sky-600' 
        : 'bg-gradient-to-b from-slate-700 to-slate-900'
    } else if (weatherId > 800) { // –û–±–ª–∞—á–Ω–æ—Å—Ç—å
      bgGradient = isDaytime 
        ? 'bg-gradient-to-b from-sky-300 to-sky-500' 
        : 'bg-gradient-to-b from-slate-600 to-slate-800'
    }
  }
  
  return (
    <AnimatePresence mode="wait">
      <motion.div
        className={`rounded-2xl overflow-hidden shadow-md mb-4 ${bgGradient} will-change-transform`}
        initial={{ opacity: 0, scale: 0.96, y: 20 }}
        animate={{ 
          opacity: isAnimating ? 0 : 1, 
          scale: isAnimating ? 0.96 : 1, 
          y: isAnimating ? 20 : 0 
        }}
        transition={{ 
          type: 'spring',
          stiffness: 260,
          damping: 20,
          duration: 0.5
        }}
        layoutId="current-weather-card"
      >
        <div className="p-6 text-white">
          <div className="flex justify-between items-center mb-4">
            <h1 className="text-3xl font-semibold">{currentCity || name}</h1>
            <div className="scale-125 origin-center transform-gpu">
              <WeatherIcon iconCode={weather && weather[0] ? weather[0].icon : '01d'} size={130} />
            </div>
          </div>
          
          <div className="flex items-end">
            <div className="text-8xl font-light leading-none will-change-contents">{Math.round(main.temp)}¬∞</div>
            <div className="ml-4 mb-3">
              <div className="text-2xl font-medium capitalize mb-1">
                {weather && weather[0] ? weather[0].description.charAt(0).toUpperCase() + weather[0].description.slice(1) : '–ó–∞–≥—Ä—É–∑–∫–∞...'}
              </div>
              <div className="text-lg opacity-90">
                {Math.round(main.temp_max)}¬∞ / {Math.round(main.temp_min)}¬∞
              </div>
            </div>
          </div>
        </div>
      </motion.div>
    </AnimatePresence>
  )
})

CurrentWeather.displayName = 'CurrentWeather'

// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π HourlyForecast.jsx
import { memo } from 'react'
import { motion } from 'framer-motion'
import { formatTime } from '../../utils/dateUtils'
import useWeather from '../../hooks/useWeather'
import WeatherIcon from '../shared/WeatherIcon'

/**
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ—á–∞—Å–æ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞
 */
const HourlyItem = memo(({ item, index, isFirst, isAnimating }) => {
  return (
    <motion.div
      key={item.dt}
      className="flex flex-col items-center min-w-16 mx-1 will-change-transform"
      initial={{ opacity: 0, y: 15 }}
      animate={{ 
        opacity: isAnimating ? 0 : 1, 
        y: isAnimating ? 15 : 0 
      }}
      transition={{ 
        duration: 0.3,
        delay: index * 0.03,
        ease: "easeOut"
      }}
    >
      <div className="text-gray-500 dark:text-gray-400 text-sm mb-2 font-medium">
        {isFirst ? '–°–µ–π—á–∞—Å' : formatTime(item.dt)}
      </div>
      <div className="mb-2">
        <WeatherIcon 
          iconCode={item.weather && item.weather[0] ? item.weather[0].icon : '01d'} 
          size={38} 
        />
      </div>
      <div className="font-bold text-lg">
        {Math.round(item.main.temp)}¬∞
      </div>
    </motion.div>
  )
})

WeeklyForecast.displayName = 'WeeklyForecast'

// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π FarmerTips.jsx
import { useState, useEffect, memo } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import useWeather from '../../hooks/useWeather'
import { generateFarmerTips } from '../../utils/weatherUtils'

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∏–∫–æ–Ω–∫—É –¥–ª—è —Å–æ–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
 * @param {string} tip - –¢–µ–∫—Å—Ç —Å–æ–≤–µ—Ç–∞
 * @returns {string} –ò–∫–æ–Ω–∫–∞ —ç–º–æ–¥–∑–∏
 */
const getTipIcon = (tip) => {
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—Å—Ç –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
  const lowerTip = tip.toLowerCase();
  
  // –°–ª–æ–≤–∞—Ä—å –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∏–º –∏–∫–æ–Ω–æ–∫
  const keywordIconMap = {
    // –ü–æ–ª–∏–≤ –∏ –≤–æ–¥–∞
    '–ø–æ–ª–∏–≤': 'üíß',
    '–ø–æ–ª–∏–≤–∞–π': 'üöø',
    '–≤–ª–∞–≥': 'üí¶',
    '–≤–æ–¥—ã': 'üåä',
    '–ø–æ–ª–µ–π—Ç–µ': 'üöø',
    '–æ—Ä–æ—à–µ–Ω': 'üí¶',
    
    // –°–æ–ª–Ω—Ü–µ –∏ —Ç–µ–ø–ª–æ
    '—Å–æ–ª–Ω—Ü': '‚òÄÔ∏è',
    '–∂–∞—Ä': 'üîÜ',
    '—Ç–µ–ø–ª': 'üå°Ô∏è',
    '—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä': 'üå°Ô∏è',
    
    // –ó–∞—â–∏—Ç–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π
    '–∑–∞—â–∏—Ç': 'üõ°Ô∏è',
    '—É–∫—Ä–æ–π': 'üèïÔ∏è',
    '—É–∫—Ä—ã–≤–∞': 'üèïÔ∏è',
    '—ç–∫—Ä–∞–Ω': '‚õ±Ô∏è',
    
    // –ú—É–ª—å—á–∏—Ä–æ–≤–∞–Ω–∏–µ
    '–º—É–ª—å—á': 'üçÇ',
    '–º—É–ª—å—á–∏—Ä': 'üçÇ',
    
    // –†–∞—Å—Ç–µ–Ω–∏—è –∏ –ø–æ—Å–∞–¥–∫–∞
    '—Ä–∞—Å—Ç': 'üå±',
    '–ø–æ—Å–∞–¥': 'üå±',
    '–ø–æ—Å–µ–≤': 'üåæ',
    '—Å–µ–º–µ–Ω': 'üå∞',
    '–≤—Å—Ö–æ–¥': 'üåø',
    '—Å–∞–∂–µ–Ω—Ü': 'üå±',
    
    // –£–¥–æ–±—Ä–µ–Ω–∏—è –∏ –ø–æ–¥–∫–æ—Ä–º–∫–∞
    '—É–¥–æ–±—Ä': 'üß™',
    '–ø–æ–¥–∫–æ—Ä–º': 'üíä',
    '–ø–∏—Ç–∞—Ç': 'ü•ó',
    
    // –°–æ—Ä–Ω—è–∫–∏ –∏ –≤—Ä–µ–¥–∏—Ç–µ–ª–∏
    '—Å–æ—Ä–Ω—è–∫': 'üßπ',
    '–≤—Ä–µ–¥–∏—Ç–µ–ª': 'üêõ',
    '–±–æ–ª–µ–∑–Ω': 'ü¶†',
    '–≥—Ä–∏–±–∫': 'üçÑ',
    
    // –£—Ä–æ–∂–∞–π
    '—É—Ä–æ–∂–∞–π': 'üçé',
    '—Å–æ–±–∏—Ä–∞–π': 'üß∫',
    '–ø–ª–æ–¥': 'üçÖ',
    
    // –°–µ–∑–æ–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã
    '–ø–æ–¥–≥–æ—Ç–æ–≤': 'üìÜ',
    '–ø–ª–∞–Ω–∏—Ä': 'üìã',
    '–æ—Å–µ–Ω': 'üçÇ',
    '–∑–∏–º': '‚ùÑÔ∏è',
    '–≤–µ—Å–µ–Ω': 'üå∑',
    '–ª–µ—Ç': '‚òÄÔ∏è',
    
    // –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    '–æ–±—Ä–µ–∑': '‚úÇÔ∏è',
    '–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç': 'üß∞',
    '–æ—Å–º–æ—Ç—Ä': 'üîç',
    
    // –ü–æ—á–≤–∞
    '–ø–æ—á–≤': 'üå∞',
    '–≥—Ä—É–Ω—Ç': 'üèûÔ∏è',
    '–∑–µ–º–ª': 'üåã',
    
    // –ü–æ–≥–æ–¥–∞
    '–¥–æ–∂–¥': 'üåßÔ∏è',
    '–ø—Ä–æ–≥–Ω–æ–∑': 'üìä',
    '–º–æ—Ä–æ–∑': '‚ùÑÔ∏è',
    '—Å–Ω–µ–≥': '‚ùÑÔ∏è',
    '–∑–∞–º–æ—Ä–æ–∑': 'üßä',
    '—Ç—É–º–∞–Ω': 'üå´Ô∏è',
    '–æ–±–ª–∞—á': '‚òÅÔ∏è',
    '–≤–µ—Ç–µ—Ä': 'üí®',
    
    // –ü—Ä–æ—á–µ–µ
    '–æ–±–µ—Å–ø–µ—á': '‚úÖ',
    '–ø—Ä–æ–≤–µ—Ä–∫': '‚ö†Ô∏è',
    '—Å–ª–µ–¥–∏—Ç–µ': 'üëÄ',
    '–∫–æ–Ω—Ç—Ä–æ–ª': 'üëÅÔ∏è',
    '–≤–µ–Ω—Ç–∏–ª—è—Ü': 'üí®',
    '–ø—Ä–æ–≤–µ—Ç': 'üå¨Ô∏è'
  };
  
  // –ò—â–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º
  for (const [keyword, icon] of Object.entries(keywordIconMap)) {
    if (lowerTip.includes(keyword)) {
      return icon;
    }
  }
  
  // –ò–∫–æ–Ω–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
  const defaultIcons = ['üåø', 'üå±', 'üåæ', 'üß†', 'üåª', 'üåº', 'üåû', 'üìù'];
  return defaultIcons[Math.floor(Math.random() * defaultIcons.length)];
};

/**
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–æ–≤–µ—Ç–∞
 */
const TipItem = memo(({ tip, index, onClick, isAnimating }) => {
  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é –∏–∫–æ–Ω–∫—É –¥–ª—è —Å–æ–≤–µ—Ç–∞
  const icon = getTipIcon(tip);
  
  return (
    <motion.div
      key={index}
      className="bg-green-50 dark:bg-green-900/20 rounded-xl p-3 flex cursor-pointer will-change-transform"
      initial={{ opacity: 0, scale: 0.9 }}
      animate={{ 
        opacity: isAnimating ? 0 : 1, 
        scale: isAnimating ? 0.9 : 1 
      }}
      transition={{ 
        duration: 0.3,
        delay: 0.4 + index * 0.05,
        ease: "easeOut"
      }}
      onClick={onClick}
      whileHover={{
        y: -2,
        boxShadow: "0 4px 8px rgba(0,0,0,0.1)",
        transition: { duration: 0.2 }
      }}
      whileTap={{
        scale: 0.97,
        transition: { duration: 0.1 }
      }}
    >
      <div className="w-10 h-10 mr-3 flex-shrink-0 bg-green-100 dark:bg-green-800/30 flex items-center justify-center rounded-full">
        <span className="text-xl">{icon}</span>
      </div>
      <p className="text-sm font-medium leading-tight line-clamp-2 overflow-hidden text-ellipsis">
        {tip}
      </p>
    </motion.div>
  )
})

TipItem.displayName = 'TipItem'

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–æ–≤–µ—Ç–æ–≤ –¥–ª—è —Ñ–µ—Ä–º–µ—Ä–æ–≤ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
 */
const FarmerTips = memo(() => {
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  const { weatherData, isAnimating } = useWeather()
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–æ–≤–µ—Ç–æ–≤
  const [tips, setTips] = useState([])
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–æ–≤–µ—Ç–∞
  const [selectedTip, setSelectedTip] = useState(null)
  
  // –ü–æ–ª—É—á–∞–µ–º —Å–æ–≤–µ—Ç—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ
  useEffect(() => {
    let isMounted = true;
    
    // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–≤–µ—Ç–æ–≤
    const loadTips = async () => {
      if (!weatherData || !weatherData.weather) return
      
      try {
        const generatedTips = await generateFarmerTips(weatherData.weather)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≤—Å–µ –µ—â–µ —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω
        if (isMounted) {
          setTips(generatedTips.slice(0, 4)) // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 4 —Å–æ–≤–µ—Ç–æ–≤
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–≤–µ—Ç–æ–≤:', error)
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if (isMounted) {
          setTips([
            '–ü–æ–ª–∏–≤–∞–π—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø–æ–≥–æ–¥–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏',
            '–°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ—á–≤—ã',
            '–ó–∞—â–∏—â–∞–π—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –æ—Ç —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π',
            '–ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –ø–µ—Ä–µ–¥ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ä–∞–±–æ—Ç'
          ])
        }
      }
    }
    
    loadTips();
    
    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      isMounted = false;
    };
  }, [weatherData])
  
  // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —Å–æ–≤–µ—Ç–æ–≤, –Ω–µ —Ä–µ–Ω–¥–µ—Ä–∏–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
  if (!weatherData || !weatherData.weather || tips.length === 0) return null
  
  return (
    <>
      <motion.div
        className="bg-white dark:bg-gray-800 rounded-2xl shadow-sm p-4 mb-4 will-change-transform"
        initial={{ opacity: 0, y: 20 }}
        animate={{ 
          opacity: isAnimating ? 0 : 1, 
          y: isAnimating ? 20 : 0 
        }}
        transition={{ 
          duration: 0.4,
          delay: 0.3,
          ease: [0.175, 0.885, 0.32, 1.275]
        }}
        layoutId="farmer-tips-card"
      >
        <h2 className="text-xl font-semibold mb-4">–°–æ–≤–µ—Ç—ã –¥–ª—è —Ñ–µ—Ä–º–µ—Ä–æ–≤</h2>
        
        <div className="grid grid-cols-2 gap-3">
          <AnimatePresence>
            {tips.map((tip, index) => (
              <TipItem
                key={index}
                tip={tip}
                index={index}
                onClick={() => setSelectedTip({ text: tip, icon: getTipIcon(tip) })}
                isAnimating={isAnimating}
              />
            ))}
          </AnimatePresence>
        </div>
      </motion.div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å–æ–≤–µ—Ç–∞ */}
      <AnimatePresence>
        {selectedTip && (
          <motion.div
            className="fixed inset-0 z-50 bg-black/50 backdrop-blur-md flex items-center justify-center p-4"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 0.2 }}
            onClick={() => setSelectedTip(null)}
          >
            <motion.div
              className="bg-white dark:bg-gray-800 rounded-3xl max-w-md w-full shadow-lg will-change-transform"
              initial={{ scale: 0.9, y: 20, opacity: 0 }}
              animate={{ scale: 1, y: 0, opacity: 1 }}
              exit={{ scale: 0.9, y: 20, opacity: 0 }}
              transition={{ 
                type: 'spring',
                damping: 25,
                stiffness: 300,
                duration: 0.3
              }}
              onClick={(e) => e.stopPropagation()}
            >
              <div className="p-6">
                <div className="w-16 h-16 mb-4 mx-auto bg-green-100 dark:bg-green-800/30 flex items-center justify-center rounded-full">
                  <span className="text-3xl">{selectedTip.icon}</span>
                </div>
                <p className="text-base font-medium text-center">
                  {selectedTip.text}
                </p>
              </div>
              <div className="border-t border-gray-200 dark:border-gray-700">
                <button 
                  onClick={() => setSelectedTip(null)}
                  className="w-full py-3 text-ios-blue font-medium text-center"
                >
                  –ó–∞–∫—Ä—ã—Ç—å
                </button>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </>
  )
})

FarmerTips.displayName = 'FarmerTips'

export {
  CurrentWeather,
  HourlyForecast,
  WeatherDetails,
  WeeklyForecast,
  FarmerTips
}
})

HourlyItem.displayName = 'HourlyItem'

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–æ—á–∞—Å–æ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */
const HourlyForecast = memo(() => {
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  const { weatherData, isAnimating } = useWeather()
  
  // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –Ω–µ —Ä–µ–Ω–¥–µ—Ä–∏–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
  if (!weatherData || !weatherData.forecast) return null
  
  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö —á–∞—Å–æ–≤
  const hourlyData = weatherData.forecast.list.slice(0, 24)
  
  return (
    <motion.div
      className="bg-white dark:bg-gray-800 rounded-2xl shadow-sm p-4 mb-4 will-change-transform"
      initial={{ opacity: 0, y: 20 }}
      animate={{ 
        opacity: isAnimating ? 0 : 1, 
        y: isAnimating ? 20 : 0 
      }}
      transition={{ 
        duration: 0.4,
        delay: 0.1,
        ease: [0.175, 0.885, 0.32, 1.275]
      }}
      layoutId="hourly-forecast-card"
    >
      <h2 className="text-xl font-semibold mb-4 px-2">–ü–æ—á–∞—Å–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑</h2>
      
      <div className="flex overflow-x-auto pb-3 pt-1 px-2 mx-0 scrollbar-hide overscroll-x-contain 
                      scroll-smooth snap-x snap-mandatory"> 
        {hourlyData.map((item, index) => (
          <HourlyItem 
            key={item.dt}
            item={item} 
            index={index} 
            isFirst={index === 0}
            isAnimating={isAnimating}
          />
        ))}
      </div>
    </motion.div>
  )
})

HourlyForecast.displayName = 'HourlyForecast'

// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π WeatherDetails.jsx
import { memo } from 'react'
import { motion } from 'framer-motion'
import { Wind, Droplets, Eye, Thermometer } from 'lucide-react'
import useWeather from '../../hooks/useWeather'

/**
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–µ—Ç–∞–ª–µ–π
 */
const DetailItem = memo(({ detail, index, isAnimating }) => {
  return (
    <motion.div
      key={detail.title}
      className="bg-gray-50 dark:bg-gray-700/40 rounded-xl p-3 flex items-center will-change-transform"
      initial={{ opacity: 0, y: 10 }}
      animate={{ 
        opacity: isAnimating ? 0 : 1, 
        y: isAnimating ? 10 : 0 
      }}
      transition={{ 
        duration: 0.3,
        delay: 0.3 + index * 0.05,
        ease: "easeOut"
      }}
      whileHover={{
        y: -2,
        transition: { duration: 0.2 }
      }}
      whileTap={{
        scale: 0.98,
        transition: { duration: 0.1 }
      }}
    >
      <div className="w-10 h-10 mr-3 rounded-full bg-white dark:bg-gray-800 
                    flex items-center justify-center flex-shrink-0">
        {detail.icon}
      </div>
      <div>
        <div className="text-xs text-gray-500 dark:text-gray-400 font-medium">
          {detail.title.toUpperCase()}
        </div>
        <div className="text-base font-bold">
          {detail.value}
        </div>
      </div>
    </motion.div>
  )
})

DetailItem.displayName = 'DetailItem'

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–µ—Ç–∞–ª–µ–π –ø–æ–≥–æ–¥—ã —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
 */
const WeatherDetails = memo(() => {
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  const { weatherData, isAnimating } = useWeather()
  
  // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –Ω–µ —Ä–µ–Ω–¥–µ—Ä–∏–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
  if (!weatherData || !weatherData.weather) return null
  
  const { main, visibility, wind } = weatherData.weather
  
  // –î–µ—Ç–∞–ª–∏ –ø–æ–≥–æ–¥—ã
  const details = [
    {
      title: '–í–µ—Ç–µ—Ä',
      value: `${wind.speed.toFixed(1)} –º/—Å`,
      icon: <Wind size={22} strokeWidth={1.5} className="text-blue-500" />
    },
    {
      title: '–í–ª–∞–∂–Ω–æ—Å—Ç—å',
      value: `${main.humidity}%`,
      icon: <Droplets size={22} strokeWidth={1.5} className="text-blue-400" />
    },
    {
      title: '–í–∏–¥–∏–º–æ—Å—Ç—å',
      value: `${(visibility / 1000).toFixed(1)} –∫–º`,
      icon: <Eye size={22} strokeWidth={1.5} className="text-indigo-400" />
    },
    {
      title: '–û—â—É—â–∞–µ—Ç—Å—è',
      value: `${Math.round(main.feels_like)}¬∞`,
      icon: <Thermometer size={22} strokeWidth={1.5} className="text-orange-500" />
    }
  ]
  
  return (
    <motion.div
      className="bg-white dark:bg-gray-800 rounded-2xl shadow-sm p-4 mb-4 will-change-transform"
      initial={{ opacity: 0, y: 20 }}
      animate={{ 
        opacity: isAnimating ? 0 : 1, 
        y: isAnimating ? 20 : 0 
      }}
      transition={{ 
        duration: 0.4,
        delay: 0.2,
        ease: [0.175, 0.885, 0.32, 1.275]
      }}
      layoutId="weather-details-card"
    >
      <h2 className="text-xl font-semibold mb-4">–î–µ—Ç–∞–ª–∏</h2>
      
      <div className="grid grid-cols-2 gap-3">
        {details.map((detail, index) => (
          <DetailItem
            key={detail.title}
            detail={detail}
            index={index}
            isAnimating={isAnimating}
          />
        ))}
      </div>
    </motion.div>
  )
})

WeatherDetails.displayName = 'WeatherDetails'

// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π WeeklyForecast.jsx
import { useMemo, memo } from 'react'
import { motion } from 'framer-motion'
import useWeather from '../../hooks/useWeather'
import { groupForecastByDays } from '../../utils/weatherUtils'
import WeatherIcon from '../shared/WeatherIcon'

/**
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —ç–ª–µ–º–µ–Ω—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –¥–µ–Ω—å
 */
const DayItem = memo(({ day, index, isAnimating, onClick }) => {
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω—é—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É
  const avgTemp = Math.round(day.temps.reduce((a, b) => a + b, 0) / day.temps.length)
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—É—é –∏–∫–æ–Ω–∫—É –ø–æ–≥–æ–¥—ã
  let mostFrequentIcon = "01d"
  if (day.weather && day.weather.length > 0) {
    const iconCounts = {}
    day.weather.forEach(icon => {
      if (!iconCounts[icon]) {
        iconCounts[icon] = 0
      }
      iconCounts[icon]++
    })
    
    let maxCount = 0
    Object.entries(iconCounts).forEach(([icon, count]) => {
      if (count > maxCount) {
        maxCount = count
        mostFrequentIcon = icon
      }
    })
  }
  
  return (
    <motion.div
      key={day.date}
      className="flex items-center justify-between py-3 border-b border-gray-100 
                dark:border-gray-700 last:border-0 cursor-pointer will-change-transform"
      initial={{ opacity: 0, y: 10 }}
      animate={{ 
        opacity: isAnimating ? 0 : 1, 
        y: isAnimating ? 10 : 0 
      }}
      transition={{
        duration: 0.3,
        delay: 0.5 + index * 0.04,
        ease: "easeOut"
      }}
      onClick={onClick}
      whileHover={{
        x: 2,
        transition: { duration: 0.2 }
      }}
      whileTap={{
        scale: 0.98,
        transition: { duration: 0.1 }
      }}
    >
      <div className="text-base font-medium">
        {index === 0 ? '–°–µ–≥–æ–¥–Ω—è' : day.day}
      </div>
      
      <div className="flex items-center">
        <div className="mr-4">
          <WeatherIcon iconCode={mostFrequentIcon} size={38} />
        </div>
        <div className="text-base font-bold w-12 text-right">
          {avgTemp}¬∞C
        </div>
      </div>
    </motion.div>
  )
})

DayItem.displayName = 'DayItem'

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
 */
const WeeklyForecast = memo(() => {
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –∏ —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  const { weatherData, openDayModal, isAnimating } = useWeather()
  
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ –¥–Ω—è–º –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º useMemo –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
  const dailyForecast = useMemo(() => {
    if (!weatherData || !weatherData.forecast) return []
    
    const groupedForecast = groupForecastByDays(weatherData.forecast)
    return Object.values(groupedForecast).slice(0, 7)
  }, [weatherData])
  
  // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞, –Ω–µ —Ä–µ–Ω–¥–µ—Ä–∏–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
  if (!weatherData || !weatherData.forecast || dailyForecast.length === 0) return null
  
  return (
    <motion.div
      className="bg-white dark:bg-gray-800 rounded-2xl shadow-sm p-4 will-change-transform"
      initial={{ opacity: 0, y: 20 }}
      animate={{ 
        opacity: isAnimating ? 0 : 1, 
        y: isAnimating ? 20 : 0 
      }}
      transition={{
        duration: 0.4,
        delay: 0.4,
        ease: [0.175, 0.885, 0.32, 1.275]
      }}
      layoutId="weekly-forecast-card"
    >
      <h2 className="text-xl font-semibold mb-4">–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 7 –¥–Ω–µ–π</h2>
      
      <div className="flex flex-col">
        {dailyForecast.map((day, index) => (
          <DayItem 
            key={day.date}
            day={day}
            index={index}
            isAnimating={isAnimating}
            onClick={() => openDayModal(day)}
          />
        ))}
      </div>
    </motion.div>
  )

import { getCurrentSeason } from './dateUtils'
import { loadFarmerTips } from './api'

// –ò–∫–æ–Ω–∫–∏ –ø–æ–≥–æ–¥—ã –≤ emoji —Ñ–æ—Ä–º–∞—Ç–µ
export const weatherEmoji = {
  "01d": "‚òÄÔ∏è", "01n": "üåô",
  "02d": "‚õÖ", "02n": "‚òÅÔ∏è",
  "03d": "‚òÅÔ∏è", "03n": "‚òÅÔ∏è",
  "04d": "‚òÅÔ∏è", "04n": "‚òÅÔ∏è",
  "09d": "üåßÔ∏è", "09n": "üåßÔ∏è",
  "10d": "üå¶Ô∏è", "10n": "üåßÔ∏è",
  "11d": "‚õàÔ∏è", "11n": "‚õàÔ∏è",
  "13d": "üå®Ô∏è", "13n": "üå®Ô∏è",
  "50d": "üå´Ô∏è", "50n": "üå´Ô∏è"
}

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
export const TEMPERATURE_THRESHOLDS = {
  TOO_COLD: 0,  // –°–ª–∏—à–∫–æ–º —Ö–æ–ª–æ–¥–Ω–æ –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π (–∑–∞–º–æ—Ä–æ–∑–∫–∏)
  TOO_HOT: 30   // –°–ª–∏—à–∫–æ–º –∂–∞—Ä–∫–æ –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π (—Ç–µ–ø–ª–æ–≤–æ–π —Å—Ç—Ä–µ—Å—Å)
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–π –¥–ª—è —Ä–∞—Å—Ç–µ–Ω–∏–π
 * @param {number} temperature - –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö –¶–µ–ª—å—Å–∏—è
 * @returns {boolean} true, –µ—Å–ª–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è
 */
export function isExtremeTemperatureForPlants(temperature) {
  return temperature <= TEMPERATURE_THRESHOLDS.TOO_COLD || 
         temperature >= TEMPERATURE_THRESHOLDS.TOO_HOT
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–≤–µ—Ç—ã –¥–ª—è —Ñ–µ—Ä–º–µ—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–≥–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 * @param {Object} weatherData - –î–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ
 * @returns {Promise<Array<string>>} –ú–∞—Å—Å–∏–≤ —Å–æ–≤–µ—Ç–æ–≤
 */
export async function generateFarmerTips(weatherData) {
  try {
    const tips = await loadFarmerTips()
    if (!tips) {
      return getDefaultTips()
    }

    const result = []
    const temp = weatherData.main.temp
    const humidity = weatherData.main.humidity

    // –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
    if (temp >= 25) result.push(...tips.temperature.hot.tips)
    else if (temp >= 15) result.push(...tips.temperature.moderate.tips)
    else result.push(...tips.temperature.cold.tips)

    // –°–æ–≤–µ—Ç—ã –ø–æ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏
    if (humidity >= 70) result.push(...tips.humidity.high.tips)
    else if (humidity >= 40) result.push(...tips.humidity.normal.tips)
    else result.push(...tips.humidity.low.tips)

    // –°–µ–∑–æ–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
    result.push(...tips.seasons[getCurrentSeason()].tips)

    // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    return [...new Set(result)].slice(0, 5)
  } catch (error) {
    console.warn('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–≤–µ—Ç–æ–≤:', error.message)
    return getDefaultTips()
  }
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–±–æ—Ä —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤
 * @returns {Array<string>} –ú–∞—Å—Å–∏–≤ —Å–æ–≤–µ—Ç–æ–≤
 */
export function getDefaultTips() {
  return [
    "–ü–æ–ª–∏–≤–∞–π—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø–æ–≥–æ–¥–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏", 
    "–°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ—á–≤—ã", 
    "–ó–∞—â–∏—â–∞–π—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –æ—Ç —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π"
  ]
}

/**
 * –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ –¥–Ω—è–º
 * @param {Object} forecast - –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑–∞
 * @returns {Object} –ü—Ä–æ–≥–Ω–æ–∑, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ –¥–Ω—è–º
 */
export function groupForecastByDays(forecast) {
  try {
    const dailyForecasts = {}
    
    forecast.list.forEach(item => {
      const date = new Date(item.dt * 1000)
      const day = date.toISOString().split('T')[0]
      
      // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–Ω—è, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
      if (!dailyForecasts[day]) {
        dailyForecasts[day] = {
          date: day,
          temps: [],
          humidity: [],
          windSpeed: [],
          visibility: [],
          feelsLike: [],
          weather: [],
          weatherData: [],
          day: date.toLocaleDateString('ru-RU', { weekday: 'long' }),
          shortDay: date.toLocaleDateString('ru-RU', { weekday: 'short' }),
          hourlyData: []
        }
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
      dailyForecasts[day].temps.push(item.main.temp)
      dailyForecasts[day].humidity.push(item.main.humidity)
      dailyForecasts[day].windSpeed.push(item.wind.speed)
      dailyForecasts[day].visibility.push(item.visibility)
      dailyForecasts[day].feelsLike.push(item.main.feels_like)
      
      if (item.weather && item.weather[0]) {
        dailyForecasts[day].weather.push(item.weather[0].icon)
        dailyForecasts[day].weatherData.push(item.weather[0])
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—á–∞—Å–æ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞
      dailyForecasts[day].hourlyData.push(item)
    })
    
    return dailyForecasts
  } catch (error) {
    console.warn('–û—à–∏–±–∫–∞ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ –¥–Ω—è–º:', error.message)
    return {}
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—É—é –∏–∫–æ–Ω–∫—É –ø–æ–≥–æ–¥—ã –∏–∑ –º–∞—Å—Å–∏–≤–∞
 * @param {Array} icons - –ú–∞—Å—Å–∏–≤ –∏–∫–æ–Ω–æ–∫ –ø–æ–≥–æ–¥—ã
 * @returns {string} –ù–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç–∞—è –∏–∫–æ–Ω–∫–∞
 */
export function getMostFrequentIcon(icons) {
  if (!icons || icons.length === 0) return "01d" // –ò–∫–æ–Ω–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  
  const iconCounts = {}
  icons.forEach(icon => {
    if (!iconCounts[icon]) {
      iconCounts[icon] = 0
    }
    iconCounts[icon]++
  })
  
  let maxIcon = "01d"
  let maxCount = 0
  
  Object.entries(iconCounts).forEach(([icon, count]) => {
    if (count > maxCount) {
      maxCount = count
      maxIcon = icon
    }
  })
  
  return maxIcon
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã –∏–∑ –º–∞—Å—Å–∏–≤–∞
 * @param {Array} weatherData - –ú–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ
 * @returns {string} –ù–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
 */
export function getMostFrequentDescription(weatherData) {
  if (!weatherData || weatherData.length === 0) return "—è—Å–Ω–æ" // –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  
  const descriptionCounts = {}
  weatherData.forEach(data => {
    const description = data.description
    if (!descriptionCounts[description]) {
      descriptionCounts[description] = 0
    }
    descriptionCounts[description]++
  })
  
  let maxDescription = "—è—Å–Ω–æ"
  let maxCount = 0
  
  Object.entries(descriptionCounts).forEach(([description, count]) => {
    if (count > maxCount) {
      maxCount = count
      maxDescription = description
    }
  })
  
  return maxDescription
}
